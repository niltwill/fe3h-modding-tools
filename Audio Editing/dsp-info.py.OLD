from pathlib import Path
from struct import unpack
import sys

# Should be 96
HEADER_LENGTH = 96

# Read header entries
def parse_dsp_header(file_path):
    with open(file_path, "rb") as f:
        data = f.read()

    offset = 0
    data_len = len(data)
    audiodata_len = data_len - HEADER_LENGTH + 1
    header_sections = []
    header2_sections = []

    while offset + 4 <= data_len:
        SampleCount = unpack(">I", data[offset:offset+4])[0]
        NibbleCount = unpack(">I", data[offset+4:offset+8])[0]
        SampleRate = unpack(">I", data[offset+8:offset+12])[0]
        LoopFlag = unpack(">H", data[offset+12:offset+14])[0]
        AudioFormat = unpack(">H", data[offset+14:offset+16])[0]
        StartAddress = unpack(">I", data[offset+16:offset+20])[0]
        EndAddress = unpack(">I", data[offset+20:offset+24])[0]
        CurrentAddress = unpack(">I", data[offset+24:offset+28])[0]
        
        Coefficient1 = unpack(">H", data[offset+28:offset+30])[0]
        Coefficient2 = unpack(">H", data[offset+30:offset+32])[0]
        Coefficient3 = unpack(">H", data[offset+32:offset+34])[0]
        Coefficient4 = unpack(">H", data[offset+34:offset+36])[0]
        Coefficient5 = unpack(">H", data[offset+36:offset+38])[0]
        Coefficient6 = unpack(">H", data[offset+38:offset+40])[0]
        Coefficient7 = unpack(">H", data[offset+40:offset+42])[0]
        Coefficient8 = unpack(">H", data[offset+42:offset+44])[0]
        Coefficient9 = unpack(">H", data[offset+44:offset+46])[0]
        Coefficient10 = unpack(">H", data[offset+46:offset+48])[0]
        Coefficient11 = unpack(">H", data[offset+48:offset+50])[0]
        Coefficient12 = unpack(">H", data[offset+50:offset+52])[0]
        Coefficient13 = unpack(">H", data[offset+52:offset+54])[0]
        Coefficient14 = unpack(">H", data[offset+54:offset+56])[0]
        Coefficient15 = unpack(">H", data[offset+56:offset+58])[0]
        Coefficient16 = unpack(">H", data[offset+58:offset+60])[0]

        Gain = unpack(">H", data[offset+60:offset+62])[0]
        InitialPredictorScale = hex(unpack(">H", data[offset+62:offset+64])[0])
        History1 = unpack(">H", data[offset+64:offset+66])[0]
        History2 = unpack(">H", data[offset+66:offset+68])[0]
        LoopPredictorScale = hex(unpack(">H", data[offset+68:offset+70])[0])
        LoopHistory1 = unpack(">H", data[offset+70:offset+72])[0]
        LoopHistory2 = unpack(">H", data[offset+72:offset+74])[0]
        ChannelCount = unpack(">H", data[offset+74:offset+76])[0]
        InterleaveSizeFrames = unpack(">H", data[offset+76:offset+78])[0]
        # Here's some padding for 18 bytes, which marks the end of header, but this is not needed to know

        header_sections.append({
            #"AudioData_Length": audiodata_len, # not in actual header data, but can be useful to know
            "SampleCount": SampleCount,
            "NibbleCount": NibbleCount,
            "SampleRate": SampleRate,
            "LoopFlag": LoopFlag,
            "AudioFormat": AudioFormat,
            "StartAddress": StartAddress,
            "EndAddress": EndAddress,
            "CurrentAddress": CurrentAddress,
            "Coefficient1": Coefficient1,
            "Coefficient2": Coefficient2,
            "Coefficient3": Coefficient3,
            "Coefficient4": Coefficient4,
            "Coefficient5": Coefficient5,
            "Coefficient6": Coefficient6,
            "Coefficient7": Coefficient7,
            "Coefficient8": Coefficient8,
            "Coefficient9": Coefficient9,
            "Coefficient10": Coefficient10,
            "Coefficient11": Coefficient11,
            "Coefficient12": Coefficient12,
            "Coefficient13": Coefficient13,
            "Coefficient14": Coefficient14,
            "Coefficient15": Coefficient15,
            "Coefficient16": Coefficient16,
            "Gain": Gain,
            "InitialPredictorScale": InitialPredictorScale,
            "History1": History1,
            "History2": History2,
            "LoopPredictorScale": LoopPredictorScale,
            "LoopHistory1": LoopHistory1,
            "LoopHistory2": LoopHistory2,
            "ChannelCount": ChannelCount,
            "InterleaveSizeFrames": InterleaveSizeFrames
        })
        
        # For stereo audio file, let's read another header section
        if ChannelCount == 2:
            offset = offset+78+18

            SampleCount = unpack(">I", data[offset:offset+4])[0]
            NibbleCount = unpack(">I", data[offset+4:offset+8])[0]
            SampleRate = unpack(">I", data[offset+8:offset+12])[0]
            LoopFlag = unpack(">H", data[offset+12:offset+14])[0]
            AudioFormat = unpack(">H", data[offset+14:offset+16])[0]
            StartAddress = unpack(">I", data[offset+16:offset+20])[0]
            EndAddress = unpack(">I", data[offset+20:offset+24])[0]
            CurrentAddress = unpack(">I", data[offset+24:offset+28])[0]
            
            Coefficient1 = unpack(">H", data[offset+28:offset+30])[0]
            Coefficient2 = unpack(">H", data[offset+30:offset+32])[0]
            Coefficient3 = unpack(">H", data[offset+32:offset+34])[0]
            Coefficient4 = unpack(">H", data[offset+34:offset+36])[0]
            Coefficient5 = unpack(">H", data[offset+36:offset+38])[0]
            Coefficient6 = unpack(">H", data[offset+38:offset+40])[0]
            Coefficient7 = unpack(">H", data[offset+40:offset+42])[0]
            Coefficient8 = unpack(">H", data[offset+42:offset+44])[0]
            Coefficient9 = unpack(">H", data[offset+44:offset+46])[0]
            Coefficient10 = unpack(">H", data[offset+46:offset+48])[0]
            Coefficient11 = unpack(">H", data[offset+48:offset+50])[0]
            Coefficient12 = unpack(">H", data[offset+50:offset+52])[0]
            Coefficient13 = unpack(">H", data[offset+52:offset+54])[0]
            Coefficient14 = unpack(">H", data[offset+54:offset+56])[0]
            Coefficient15 = unpack(">H", data[offset+56:offset+58])[0]
            Coefficient16 = unpack(">H", data[offset+58:offset+60])[0]

            Gain = unpack(">H", data[offset+60:offset+62])[0]
            InitialPredictorScale = hex(unpack(">H", data[offset+62:offset+64])[0])
            History1 = unpack(">H", data[offset+64:offset+66])[0]
            History2 = unpack(">H", data[offset+66:offset+68])[0]
            LoopPredictorScale = hex(unpack(">H", data[offset+68:offset+70])[0])
            LoopHistory1 = unpack(">H", data[offset+70:offset+72])[0]
            LoopHistory2 = unpack(">H", data[offset+72:offset+74])[0]
            ChannelCount = unpack(">H", data[offset+74:offset+76])[0]
            InterleaveSizeFrames = unpack(">H", data[offset+76:offset+78])[0]
            
            header2_sections.append({
                "SampleCount": SampleCount,
                "NibbleCount": NibbleCount,
                "SampleRate": SampleRate,
                "LoopFlag": LoopFlag,
                "AudioFormat": AudioFormat,
                "StartAddress": StartAddress,
                "EndAddress": EndAddress,
                "CurrentAddress": CurrentAddress,
                "Coefficient1": Coefficient1,
                "Coefficient2": Coefficient2,
                "Coefficient3": Coefficient3,
                "Coefficient4": Coefficient4,
                "Coefficient5": Coefficient5,
                "Coefficient6": Coefficient6,
                "Coefficient7": Coefficient7,
                "Coefficient8": Coefficient8,
                "Coefficient9": Coefficient9,
                "Coefficient10": Coefficient10,
                "Coefficient11": Coefficient11,
                "Coefficient12": Coefficient12,
                "Coefficient13": Coefficient13,
                "Coefficient14": Coefficient14,
                "Coefficient15": Coefficient15,
                "Coefficient16": Coefficient16,
                "Gain": Gain,
                "InitialPredictorScale": InitialPredictorScale,
                "History1": History1,
                "History2": History2,
                "LoopPredictorScale": LoopPredictorScale,
                "LoopHistory1": LoopHistory1,
                "LoopHistory2": LoopHistory2,
                "ChannelCount": ChannelCount,
                "InterleaveSizeFrames": InterleaveSizeFrames
            })

        break

    if(header_sections):
        print("Header 1")
        print(header_sections)
    if(header2_sections):
        print("")
        print("Header 2")
        print(header2_sections)

    return header_sections, header2_sections

# Main
if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("FE3H - Display verbose information about Nintendo DSP audio files")
        print("(This is used as basis for editing/understanding its structure)")
        print("Usage: python dsp-info.py XXX.dsp")
        sys.exit(1)

    filename = sys.argv[1]
    parsed = parse_dsp_header(filename)
